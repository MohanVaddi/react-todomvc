{"version":3,"sources":["components/TodoItems.module.css","components/TodoList.module.css","components/AddToDoItem.module.css","store/todo-context.js","components/AddToDoItem.jsx","components/TodoItems.jsx","components/TodoList.jsx","store/ContextProvider.jsx","App.jsx","index.js"],"names":["module","exports","TodoContext","createContext","toDoItems","completed","addItem","removeCompleted","markAsCompleted","toggleCompleted","AddToDoItem","props","ctx","useContext","inputRef","useRef","onSubmit","event","preventDefault","current","value","trim","length","item","id","Math","random","title","isCompleted","className","classes","input","type","ref","placeholder","TodoItems","strikeThrough","onClick","markIcon","text","href","delBtn","TodoList","useState","toggleAll","setToggleAll","toDoList","setToDoList","useEffect","selectRef","toBecompletedCount","card","map","btnDiv","onChange","console","log","filter","initialState","findCompleted","arr","count","forEach","itemReducer","state","action","updatedItems","updatedItems2","idx","findIndex","updatedItem","ContextProvider","useReducer","itemState","itemDispatcher","todoContext","Provider","children","App","toBeCompleted","setToBeCompleted","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92bdd424.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"markIcon\":\"TodoItems_markIcon__X1SXF\",\"title\":\"TodoItems_title__uK_0C\",\"text\":\"TodoItems_text__23N08\",\"delBtn\":\"TodoItems_delBtn__2fm71\",\"strikeThrough\":\"TodoItems_strikeThrough__1coQV\",\"strike\":\"TodoItems_strike__3HTue\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"TodoList_card__E2O4S\",\"btnDiv\":\"TodoList_btnDiv__22TxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"AddToDoItem_input__3HhvO\"};","import { createContext } from 'react';\n\nconst TodoContext = createContext({\n    toDoItems: [],\n    completed: 0,\n    addItem: () => {},\n    removeCompleted: () => {},\n    markAsCompleted: () => {},\n    toggleCompleted: () => {},\n});\n\nexport default TodoContext;\n","import React, { useContext, useRef } from 'react';\nimport classes from './AddToDoItem.module.css';\nimport TodoContext from '../store/todo-context';\n\nconst AddToDoItem = (props) => {\n    const ctx = useContext(TodoContext);\n    const inputRef = useRef();\n    const submitHandler = (event) => {\n        event.preventDefault();\n        if (inputRef.current.value.trim().length === 0) {\n            return;\n        }\n        const item = {\n            id: Math.random(),\n            title: inputRef.current.value,\n            isCompleted: false,\n        };\n        ctx.addItem(item);\n        inputRef.current.value = '';\n    };\n\n    return (\n        <form onSubmit={submitHandler}>\n            <div className={classes.input}>\n                <input type='text' ref={inputRef} placeholder='What needs to be done? ' />\n            </div>\n        </form>\n    );\n};\n\nexport default AddToDoItem;\n","import React, { useContext } from 'react';\nimport classes from './TodoItems.module.css';\nimport TodoContext from '../store/todo-context';\n\nconst TodoItems = (props) => {\n    const ctx = useContext(TodoContext);\n\n    const markAsCompleteHandler = () => {\n        ctx.markAsCompleted(props.item);\n    };\n    return (\n        <div\n            key={Math.random()}\n            className={`${classes.title} ${\n                props.item.isCompleted ? classes.strikeThrough : ''\n            }`}\n            onClick={markAsCompleteHandler}>\n            <i className={`fas fa-list-ul ${classes.markIcon}`} />\n            <span className={classes.text}> {`  ${props.item.title}`}</span>\n            <a href='#!' className={classes.delBtn}>\n                <i className={`fas fa-trash-alt ${classes.markIcon}`}></i>\n            </a>\n        </div>\n    );\n};\n\nexport default TodoItems;\n","import React, { useContext, useState, useRef, useEffect } from 'react';\nimport { Fragment } from 'react';\nimport TodoContext from '../store/todo-context';\nimport AddToDoItem from './AddToDoItem';\nimport TodoItems from './TodoItems';\nimport classes from './TodoList.module.css';\n\nconst TodoList = (props) => {\n    const ctx = useContext(TodoContext);\n    const [toggleAll, setToggleAll] = useState(false);\n    const [toDoList, setToDoList] = useState(ctx.toDoItems);\n\n    useEffect(() => {\n        setToDoList(ctx.toDoItems);\n        if (ctx.toDoItems.length > 0) {\n            selectRef.current.value = 'all';\n        }\n    }, [ctx.toDoItems]);\n\n    props.toBecompletedCount(ctx.toDoItems.length - ctx.completed);\n\n    const selectRef = useRef();\n    const filterChangeHandler = () => {\n        console.log(selectRef.current.value);\n        if (selectRef.current.value === 'all') {\n            setToDoList(ctx.toDoItems);\n        } else if (selectRef.current.value === 'active') {\n            let toDoItems = ctx.toDoItems.filter(\n                (item) => item.isCompleted === false\n            );\n            setToDoList(toDoItems);\n            console.log(toDoItems);\n        } else {\n            let toDoItems = ctx.toDoItems.filter(\n                (item) => item.isCompleted === true\n            );\n            setToDoList(toDoItems);\n        }\n    };\n    return (\n        <Fragment>\n            <div className={classes.card}>\n                <AddToDoItem />\n                {toDoList.map((item) => {\n                    return <TodoItems key={item.id} item={item} />;\n                })}\n                <div className={classes.btnDiv}>\n                    {ctx.toDoItems.length > 0 ? (\n                        toggleAll ? (\n                            <button\n                                onClick={() => {\n                                    setToggleAll(false);\n                                    ctx.toggleCompleted('off');\n                                }}>\n                                Activate all\n                            </button>\n                        ) : (\n                            <button\n                                onClick={() => {\n                                    setToggleAll(true);\n                                    ctx.toggleCompleted('on');\n                                }}>\n                                Deactivate All\n                            </button>\n                        )\n                    ) : (\n                        ''\n                    )}\n                    {ctx.completed > 0 && (\n                        <button\n                            onClick={() => {\n                                ctx.removeCompleted();\n                            }}>\n                            Delete Completed\n                        </button>\n                    )}\n                </div>\n                {ctx.toDoItems.length > 0 && (\n                    <select\n                        className={`select ${classes.btnDiv}`}\n                        ref={selectRef}\n                        onChange={filterChangeHandler}>\n                        <option value='all'>Show All</option>\n                        <option value='active'>Active</option>\n                        <option value='completed'>Completed</option>\n                    </select>\n                )}\n            </div>\n        </Fragment>\n    );\n};\n\nexport default TodoList;\n","import React, { useReducer } from 'react';\nimport TodoContext from './todo-context';\n\nconst initialState = {\n    toDoItems: [\n        {\n            id: Math.random(),\n            title: 'Learn React',\n            isCompleted: true,\n        },\n        {\n            id: Math.random(),\n            title: 'Data Structures',\n            isCompleted: false,\n        },\n        {\n            id: Math.random(),\n            title: 'React Native',\n            isCompleted: false,\n        },\n    ],\n    completed: 1,\n};\n\nconst findCompleted = (arr) => {\n    let count = 0;\n    arr.forEach((item) => {\n        if (item.isCompleted === true) {\n            count += 1;\n        }\n    });\n    return count;\n};\n\nconst itemReducer = (state, action) => {\n    if (action.type === 'ADD') {\n        console.log(action.item);\n        let updatedItems = [...state.toDoItems];\n        updatedItems[state.toDoItems.length] = action.item;\n        console.log({\n            toDoItems: updatedItems,\n            completed: state.completed,\n        });\n        return {\n            toDoItems: updatedItems,\n            completed: state.completed,\n        };\n    } else if (action.type === 'REMOVE_COMPLETED') {\n        console.log('REMOVE_COMPLETED');\n        let updatedItems2 = state.toDoItems.filter((item) => {\n            return item.isCompleted !== true;\n        });\n        let newState2 = {\n            toDoItems: updatedItems2,\n            completed: findCompleted(updatedItems2),\n        };\n        return newState2;\n    } else if (action.type === 'MARK_COMPLETED') {\n        console.log(state);\n        console.log('mark as completed');\n        console.log(action.item);\n        const idx = state.toDoItems.findIndex(\n            (item) => item.id === action.item.id\n        );\n        let updatedItem = {\n            id: action.item.id,\n            title: action.item.title,\n            isCompleted: !action.item.isCompleted,\n        };\n        let updatedItems = [...state.toDoItems];\n        updatedItems[idx] = updatedItem;\n        console.log({\n            toDoItems: updatedItems,\n            completed: findCompleted(updatedItems),\n        });\n        return {\n            toDoItems: updatedItems,\n            completed: findCompleted(updatedItems),\n        };\n    } else if (action.type === 'TOGGLE_ALL') {\n        if (action.value) {\n            let updatedItems = [...state.toDoItems];\n            updatedItems.map((item) => {\n                return (item.isCompleted = true);\n            });\n            return {\n                toDoItems: updatedItems,\n                completed: updatedItems.length,\n            };\n        } else {\n            let updatedItems = [...state.toDoItems];\n            updatedItems.map((item) => {\n                return (item.isCompleted = false);\n            });\n            return {\n                toDoItems: updatedItems,\n                completed: 0,\n            };\n        }\n    }\n    return initialState;\n};\n\nconst ContextProvider = (props) => {\n    const [itemState, itemDispatcher] = useReducer(itemReducer, initialState);\n\n    const addItemHandler = (item) => {\n        itemDispatcher({ type: 'ADD', item: item });\n    };\n    const removeCompletedHandler = () => {\n        itemDispatcher({ type: 'REMOVE_COMPLETED' });\n    };\n    const markAsCompletedHandler = (item) => {\n        itemDispatcher({ type: 'MARK_COMPLETED', item: item });\n    };\n    const toggleCompletedHandler = (value) => {\n        if (value === 'on') {\n            itemDispatcher({ type: 'TOGGLE_ALL', value: true });\n        } else {\n            itemDispatcher({ type: 'TOGGLE_ALL', value: false });\n        }\n    };\n\n    const todoContext = {\n        toDoItems: itemState.toDoItems,\n        completed: itemState.completed,\n        addItem: addItemHandler,\n        removeCompleted: removeCompletedHandler,\n        markAsCompleted: markAsCompletedHandler,\n        toggleCompleted: toggleCompletedHandler,\n    };\n    return (\n        <TodoContext.Provider value={todoContext}>\n            {props.children}\n        </TodoContext.Provider>\n    );\n};\n\nexport default ContextProvider;\n","import { useState } from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport ContextProvider from './store/ContextProvider';\n\n/*\n  TodoMVC\n  1. add todo\n  2. display todos\n  3. cross off todo\n  4. show number of active todos\n  5. filter all/active/complete\n  6. delete todo\n  7. delete all complete\n    7.1 only show if atleast one is complete\n  8. button to toggle all on/off\n*/\n\nconst App = () => {\n    const [toBeCompleted, setToBeCompleted] = useState(0);\n\n    const completedCountHandler = (count) => {\n        setToBeCompleted(count);\n    };\n\n    return (\n        <ContextProvider>\n            <div className='App App-header'>\n                <h3>ToDo List ({toBeCompleted})</h3>\n                <TodoList toBecompletedCount={completedCountHandler} />\n            </div>\n        </ContextProvider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}